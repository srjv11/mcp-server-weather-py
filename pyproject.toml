[project]
name = "mcp-server-weather-py"
version = "2.0.0"
description = "Enhanced MCP server providing weather data from the National Weather Service API with advanced features"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "httpx>=0.28.1",
    "mcp[cli]>=1.9.4",
    "pre-commit>=4.2.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "ruff>=0.11.13",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
]

[project.scripts]
weather-mcp = "weather_improved:main"

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --disable-warnings"
testpaths = [
    ".",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
asyncio_mode = "auto"
markers = [
    "asyncio: mark test as async",
]

[tool.coverage.run]
source = ["."]
omit = [
    "test_*.py",
    "*_test.py",
    ".venv/*",
    "venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py313"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[dependency-groups]
dev = [
    "mypy>=1.16.1",
]
